{"version":3,"sources":["scripts/main.js"],"names":["board","probabilityCount","score","started","body","document","querySelector","fieldRowAll","querySelectorAll","start","scoreDisplay","messageStart","messageLose","messageWin","getRandomInt","max","Math","floor","random","newCell","freeCell","rowInd","cellInd","checkIfLose","classList","remove","shiftRowLeft","row","newRow","j","length","push","moveRight","check","i","reverse","checkAndAct","display","checkWin","moveLeft","moveUp","newColumn","moveDown","changeAdditionalClassCell","element","newAddClass","add","cell","handleWin","textContent","goToOldBoard","oldBoard","oldProbabilityCount","oldScore","lose","temp","tempProbabilityCount","tempScore","cells","boardCell","startGame","addEventListener","ourEvent","target","matches","e","key"],"mappings":"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","file":"main.5727e6a4.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nlet board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nlet probabilityCount = 0;\nlet score = 0;\nlet started = false;\n\nconst body = document.querySelector('body');\nconst fieldRowAll = body.querySelectorAll('.field-row');\nconst start = body.querySelector('.start');\nconst scoreDisplay = body.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nfunction newCell() {\n  if (!freeCell()) {\n    if (checkIfLose()) {\n      messageLose.classList.remove('hidden');\n    }\n\n    return;\n  }\n\n  let rowInd = 0;\n  let cellInd = 0;\n\n  while (true) {\n    rowInd = getRandomInt(4);\n    cellInd = getRandomInt(4);\n\n    if (board[rowInd][cellInd] === 0) {\n      if (probabilityCount < 10) {\n        board[rowInd][cellInd] = 2;\n        probabilityCount++;\n      } else {\n        board[rowInd][cellInd] = 4;\n        probabilityCount = 0;\n      }\n\n      return;\n    }\n  }\n};\n\nfunction shiftRowLeft(row) {\n  const newRow = [];\n\n  for (let j = 0; j < row.length; j++) {\n    if (row[j] !== 0) {\n      newRow.push(row[j]);\n    }\n  }\n\n  for (let j = newRow.length; j < row.length; j++) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction moveRight(check) {\n  for (let i = 0; i < board.length; i++) {\n    board[i] = shiftRowLeft(board[i]).reverse();\n  }\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 1; j < board[i].length; j++) {\n      if (board[i][j - 1] === board[i][j]) {\n        board[i][j - 1] = 0;\n        board[i][j] = board[i][j] * 2;\n        score += board[i][j];\n      }\n    }\n  }\n\n  for (let i = 0; i < board.length; i++) {\n    board[i] = shiftRowLeft(board[i]).reverse();\n  }\n\n  checkAndAct(check);\n}\n\nfunction checkAndAct(check) {\n  if (!check) {\n    newCell();\n    display();\n    checkWin();\n  }\n}\n\nfunction moveLeft(check) {\n  for (let i = 0; i < board.length; i++) {\n    board[i] = shiftRowLeft(board[i]);\n  }\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 1; j < board[i].length; j++) {\n      if (board[i][j - 1] === board[i][j]) {\n        board[i][j - 1] = board[i][j - 1] * 2;\n        board[i][j] = 0;\n        score += board[i][j - 1];\n      }\n    }\n  }\n\n  for (let i = 0; i < board.length; i++) {\n    board[i] = shiftRowLeft(board[i]);\n  }\n\n  checkAndAct(check);\n}\n\nfunction moveUp(check) {\n  for (let i = 0; i < board.length; i++) {\n    let newColumn = [];\n\n    for (let j = 0; j < board[0].length; j++) {\n      newColumn.push(board[j][i]);\n    }\n\n    newColumn = shiftRowLeft(newColumn);\n\n    for (let j = 1; j < newColumn.length; j++) {\n      if (newColumn[j - 1] === newColumn[j]) {\n        newColumn[j - 1] = newColumn[j - 1] * 2;\n        newColumn[j] = 0;\n        score += newColumn[j - 1];\n      }\n    }\n\n    newColumn = shiftRowLeft(newColumn);\n\n    for (let j = 0; j < newColumn.length; j++) {\n      board[j][i] = newColumn[j];\n    }\n  }\n\n  checkAndAct(check);\n}\n\nfunction moveDown(check) {\n  for (let i = 0; i < board.length; i++) {\n    let newColumn = [];\n\n    for (let j = 0; j < board[0].length; j++) {\n      newColumn.push(board[j][i]);\n    }\n\n    newColumn = shiftRowLeft(newColumn).reverse();\n\n    for (let j = 1; j < newColumn.length; j++) {\n      if (newColumn[j - 1] === newColumn[j]) {\n        newColumn[j - 1] = 0;\n        newColumn[j] = newColumn[j] * 2;\n        score += newColumn[j];\n      }\n    }\n\n    newColumn = shiftRowLeft(newColumn).reverse();\n\n    for (let j = 0; j < newColumn.length; j++) {\n      board[j][i] = newColumn[j];\n    }\n  }\n\n  checkAndAct(check);\n}\n\nfunction changeAdditionalClassCell(element, newAddClass) {\n  element.classList = '';\n  element.classList.add('field-cell');\n\n  if (newAddClass) {\n    element.classList.add(newAddClass);\n  }\n}\n\nfunction checkWin() {\n  for (const row of board) {\n    for (const cell of row) {\n      if (cell === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction handleWin() {\n  messageWin.classList.remove('hidden');\n  start.textContent = 'Start';\n  start.classList.remove('restart');\n  start.classList.add('start');\n  started = false;\n  messageStart.classList.remove('hidden');\n}\n\nif (checkAndAct) {\n  if (checkWin()) {\n    handleWin();\n  }\n}\n\nfunction freeCell() {\n  for (const row of board) {\n    for (const cell of row) {\n      if (cell === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction goToOldBoard(oldBoard, oldProbabilityCount, oldScore) {\n  board = [...oldBoard];\n  probabilityCount = oldProbabilityCount;\n  score = oldScore;\n}\n\nfunction checkIfLose() {\n  let lose = true;\n  const temp = [...board];\n  const tempProbabilityCount = probabilityCount;\n  const tempScore = score;\n\n  moveLeft('check');\n\n  if (freeCell()) {\n    lose = false;\n    goToOldBoard(temp, tempProbabilityCount, tempScore);\n\n    return lose;\n  }\n\n  moveUp('check');\n\n  if (freeCell()) {\n    lose = false;\n    goToOldBoard(temp, tempProbabilityCount, tempScore);\n\n    return lose;\n  }\n\n  goToOldBoard(temp, tempProbabilityCount, tempScore);\n\n  return lose;\n}\n\nfunction display() {\n  for (let i = 0; i < board.length; i++) {\n    const cells = fieldRowAll[i].querySelectorAll('.field-cell');\n\n    for (let j = 0; j < board[i].length; j++) {\n      const boardCell = board[i][j];\n      const cell = cells[j];\n\n      if (boardCell !== 0) {\n        cell.textContent = boardCell;\n\n        const addClass = 'field-cell--' + boardCell;\n\n        changeAdditionalClassCell(cell, addClass);\n      } else {\n        cell.textContent = '';\n        changeAdditionalClassCell(cell);\n      }\n    }\n  }\n\n  scoreDisplay.textContent = score;\n}\n\nfunction startGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  probabilityCount = 0;\n  score = 0;\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  newCell();\n  newCell();\n  display();\n}\n\nstart.addEventListener('click', ourEvent => {\n  startGame();\n  started = true;\n\n  if (ourEvent.target.matches('.start')) {\n    start.textContent = 'Restart';\n    start.classList.remove('start');\n    start.classList.add('restart');\n  }\n});\n\ndocument.addEventListener('keyup', e => {\n  if (!started) {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moveRight();\n      break;\n\n    case 'ArrowUp':\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      break;\n\n    default:\n      break;\n  }\n});\n"]}